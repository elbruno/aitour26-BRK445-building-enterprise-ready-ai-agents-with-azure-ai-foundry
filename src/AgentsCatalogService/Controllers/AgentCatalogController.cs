#pragma warning disable SKEXP0110

using Microsoft.AspNetCore.Mvc;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Agents.AzureAI;
using Microsoft.SemanticKernel.ChatCompletion;
using SharedEntities;
using ZavaAIFoundrySKAgentsProvider;

namespace AgentsCatalogService.Controllers;

[ApiController]
[Route("api")]
public class AgentCatalogController : ControllerBase
{
    private readonly ILogger<AgentCatalogController> _logger;
    private AzureAIAgent? _agent;
    private readonly AIFoundryAgentProvider _aIFoundryAgentProvider;

    public AgentCatalogController(
        ILogger<AgentCatalogController> logger,
        AIFoundryAgentProvider aIFoundryAgentProvider)
    {
        _logger = logger;
        _aIFoundryAgentProvider = aIFoundryAgentProvider;
    }

    [HttpGet("agents")]
    public ActionResult<AgentListResponse> GetAvailableAgents()
    {
        try
        {
            _logger.LogInformation("Fetching available agents");

            var agents = new AgentListResponse
            {
                Agents = AgentCatalog.Agents.ToArray()
            };

            return Ok(agents);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error fetching available agents");
            return StatusCode(500, "Error fetching available agents");
        }
    }

    [HttpPost("test")]
    public async Task<ActionResult<AgentTesterResponse>> TestAgentAsync([FromBody] AgentTesterRequest request)
    {
        var agentId = "";
        var question = "";

        try
        {
            _logger.LogInformation("Testing agent {AgentId} with question: {Question}", request.AgentId, request.Question);

            agentId = request.AgentId;
            question = request.Question;

            var prompt = $@"
You are a helpful AI assistant specializing in DIY projects and tool recommendations.
Agent Type: {AgentCatalog.GetAgentName(agentId)}
User Question: {question}

Please provide a helpful and informative response based on your expertise.
Keep the response concise but thorough, and be encouraging while maintaining safety awareness.
";

            // Create a Semantic Kernel agent based on the agent definition using the agentId
            var agentResponse = string.Empty;
            _agent = await _aIFoundryAgentProvider.GetAzureAIAgent(agentId);
            AzureAIAgentThread agentThread = new(_agent.Client);

            ChatMessageContent message = new(AuthorRole.User, prompt);
            await foreach (ChatMessageContent response in _agent.InvokeAsync(message, agentThread))
            {
                _logger.LogInformation("Received response from agent: {Content}", response.Content);
                agentResponse += (response.Content);
            }

            var agentTesterResponse = new AgentTesterResponse
            {
                AgentId = agentId,
                AgentName = AgentCatalog.GetAgentName(agentId),
                Question = question,
                Response = string.IsNullOrWhiteSpace(agentResponse)
                    ? GenerateFallbackResponse(agentId, question)
                    : agentResponse,
                Timestamp = DateTime.UtcNow,
                IsSuccessful = !string.IsNullOrWhiteSpace(agentResponse),
                ErrorMessage = string.IsNullOrWhiteSpace(agentResponse)
                    ? "No response generated by the agent."
                    : null
            };
            _logger.LogInformation("Agent response: {Response}", agentTesterResponse.Response);

            return Ok(agentTesterResponse);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error testing agent {AgentId}", agentId);

            var fallbackResponse = new AgentTesterResponse
            {
                AgentId = agentId,
                AgentName = AgentCatalog.GetAgentName(agentId),
                Question = question,
                Response = $"Error occurred while processing your question: {ex.Message}",
                Timestamp = DateTime.UtcNow,
                IsSuccessful = false,
                ErrorMessage = ex.Message
            };

            return Ok(fallbackResponse);
        }
    }
    private string GenerateFallbackResponse(string agentId, string question)
    {
        var agentName = AgentCatalog.GetAgentName(agentId);
        var agent = AgentCatalog.GetAgent(agentId);

        if (agent != null)
        {
            return $"Hello! I'm the {agentName}. You asked: '{question}'. " +
                   $"{agent.Description}. " +
                   "How can I assist you further with your request?";
        }

        return $"Hello! I'm an AI assistant. You asked: '{question}'. " +
               "How can I help you with your DIY project today?";
    }
}